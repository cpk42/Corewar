/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   corewar.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ltanenba <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/05/16 23:48:14 by ltanenba          #+#    #+#             */
<<<<<<< HEAD
/*   Updated: 2018/05/23 22:08:53 by ckrommen         ###   ########.fr       */
=======
/*   Updated: 2018/05/24 16:05:24 by ltanenba         ###   ########.fr       */
>>>>>>> 50587556e69e31d5b2865c57cdc35477cbb041e1
/*                                                                            */
/* ************************************************************************** */

#define DEBUG // XXX
#ifdef DEBUG
# include <stdio.h>
# include <assert.h>
#endif

#ifndef COREWAR_H
# define COREWAR_H

# include "op.h"

typedef struct		s_proc
{
	int					carry;
	int					proc_id;
	int					pc;
	int					lcount;
	int					tminus;
	long				regs[REG_NUMBER];
	struct s_proc		*next;
	struct s_proc		*prev;
}					t_proc;


# include "arena.h"
# include "libft.h"
# include <stdlib.h>
# include <fcntl.h>
# include <unistd.h>

<<<<<<< HEAD
# define OP_XOR 0x08
# define OP_OR 0x07
# define OP_AND 0x06
# define OP_SUB 0x05
# define OP_ADD 0x04
# define OP_ST 0x03
# define OP_LD 0x02
=======
# define MAX_OPCODE 16
# define PROCESS_CURRENT_OP(ps) (g_op_tab + ((int)(g_arena[ps->pc]) - 1))
# define TRUNCATED_DIR_SIZE IND_SIZE
# define ft_abs(x) ((x) < 0 ? -(x) : (x))
>>>>>>> 50587556e69e31d5b2865c57cdc35477cbb041e1

enum	e_opcodes
{
	LIVE = 1,
	LD, 
	ST, 
	ADD,
	SUB,
	AND,
	OR, 
	XOR,
	ZJMP,
	LDI,
	STI,
	FORK,
	LLD,
	LLDI,
	LFORK,
	AFF
};

typedef struct			s_op
{
	char	*name;
	int		argc;
	int		legal_argtypes[4];
	int		opcode;
	int		cycle_cost;
	char	*mnemonic;
	int		has_codebyte;
	int		truncate;
}					t_op;

extern t_op				g_op_tab[17];

int			get_byte(t_proc *ps, int req_idx);
int			get_short(t_proc *ps, int req_idx);
int			get_int(t_proc *ps, int req_idx);
void		print_bytes(void *p, int size);
void		print_argtypes(t_arg_type *argtypes);
void		print_registers(t_proc *ps);
t_arg_type	*extract_argtypes(char coding_byte);
int			has_legal_argtypes(t_op *op, t_arg_type *argtypes);
int			instr_size(t_op *op, t_arg_type *argtypes);

/* ops */
int			do_st(t_proc *ps);
int			do_sti(t_proc *ps);

/*
** WIP struct for players.
*/

typedef struct		s_player
{
<<<<<<< HEAD
	int			pc;
	int			carry;
	long		regs[REG_NUMBER];
}						t_proc;
=======
	header_t			h;
	char				id;
	int					start_idx;
	char				code[CHAMP_MAX_SIZE];
	int					cycle_lived;
	int					lcount;
}					t_player;
>>>>>>> 50587556e69e31d5b2865c57cdc35477cbb041e1

/*
** Player functions.
*/

<<<<<<< HEAD
/*
** Writing to memory and registers
*/

byte			*read_from_arena(byte *ar, int start_idx, size_t size, int pc);
void			write_to_arena(byte *ar, int start_idx, size_t size, int pc, void *bytes);
void			write_backwards(byte *ar, int idx, size_t size, int pc, void *bytes);
void			reg_reg_write(t_proc *ps, int dst_reg, int src_reg);
void			dir_reg_write(t_proc *ps, int dst_reg, int value);
void			reg_mem_write(t_proc *ps, int dst_idx, int src_reg, byte *ar);

/*
** Argument type functions
*/

t_arg_type		*extract_argtypes(byte coding_byte);
int				has_legal_argtypes(byte coding_byte, t_op *op);

/*
** Number utilities
*/

void			print_bytes(void *p, int size);
unsigned long	bigendian_num(byte *buf, size_t size);

=======
void				new_player(char *file_name, t_player *p);
void				del_player(t_player **p);

/*
** WIP struct for proccesses.
*/

/*
** t_proc functions:
*/

t_proc				*new_proc(int mem_idx, t_proc *parent);
void				del_proc(t_proc **p);
void				add_proc(int mem_idx, t_proc *parent);

/*
** Global declaration for g_vm.
*/

typedef struct		s_vm
{
	int					player_num;
	t_player			p[MAX_PLAYERS];
	int					proc_num;
	t_proc				*proc_head;
	int					cycle;
	int					dminus;
}					t_vm;

t_vm				g_vm;

void				initialize_vm(int player_num);
void				print_arena(void);
void				print_player(int player_num);
>>>>>>> 50587556e69e31d5b2865c57cdc35477cbb041e1

#endif
